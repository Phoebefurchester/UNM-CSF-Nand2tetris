// PART 2 (TASK A) Memory

/*
    The complete address space of the computer's memory,
    including RAM and memory mapped I/O.
    The chip facilitates read and write operations, as follows:
        Read:  out(t) = Memory[address(t)](t)
        Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
    In words: the chip always outputs the value stored at the memory 
    location specified by address. If load=1, the in value is loaded 
    into the memory location specified by address. This value becomes 
    available through the out output in the next time step.
    Address space rules:
    Only the upper 16K+8K+1 words of the Memory chip are used. 
    Access to address>0x6000 is invalid. Access to any address in 
    the range 0x4000-0x5FFF results in accessing the screen memory 
    map. Access to address 0x6000 results in accessing the keyboard 
    memory map. The behavior in these addresses is described in the 
    Screen and Keyboard chip specifications given in the book.
*/

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

        /*
            RAM {Data} => RAM16K
            if sel == 00: access first RAM8K (top-half of data)
            if sel == 01: access second RAM8K (bottom-half of data)
        */
        // if sel == 10: access third RAM {Screen} => RAM8K
        // if sel == 11: access fourth RAM {KBD} => RAM8K

        // Calculate load (if write function)
        DMux4Way(in = load, sel = address[13..14], a = ifram0, b = ifram1, c = ifscreen, d = ifkeyboard);
        
        // get 1-bit load to access RAM16K {Data}
        Or(a = ifram0, b = ifram1, out = ifram);

        // Write function in data memory
        RAM16K(in = in, load = ifram, address = address[0..13], out = outram);
        Screen(in = in, load = ifscreen, address = address[0..12], out = outscreen);
        Keyboard(out = outkbd);

        // Read function in data memory
        Mux4Way16(a = outram, b = outram, c = outscreen, d = outkbd, sel = address[13..14], out = out);
}
